# This file has been generated -- see https://github.com/haskell-CI/haskell-ci
# and then edited further

language: c
sudo: required

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

matrix:
  include:
    - env: CABALVER=2.0.0.1 GHCVER=8.0.2 PROJECT_FILE=cabal.project WEBAPI=webapi LIBS="webapi webapi-contract webapi-docs webapi-swagger"
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-2.4,ghc-8.0.2, build-essential, zlib1g-dev], sources: [hvr-ghc]}}

    # - env: CABALVER=2.2.0.1 GHCVER=8.2.2 PROJECT_FILE=cabal.project WEBAPI=webapi LIBS="webapi webapi-contract webapi-docs webapi-swagger"
    #   compiler: ": #GHC 8.2.2"
    #   addons: {apt: {packages: [cabal-install-2.4,ghc-8.2.2], sources: [hvr-ghc]}}      

    # - env: CABALVER=2.2.0.1 GHCVER=8.4.4 PROJECT_FILE=cabal.project WEBAPI=webapi LIBS="webapi webapi-contract webapi-docs webapi-swagger"
    #   compiler: ": #GHC 8.4.4"
    #   addons: {apt: {packages: [cabal-install-2.4,ghc-8.4.4], sources: [hvr-ghc]}}      

before_install:
 - unset CC
 - export PATH=/opt/ghc/bin:/opt/cabal/bin:$PATH
 - echo $PATH
 - ls /opt/ghc/bin
 - ls /opt/cabal/bin

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal new-update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - rm -fv $PROJECT_FILE
 - "printf 'packages: \"webapi\" \"webapi-contract\" \"webapi-swagger\" \"webapi-docs\"\\n' > $PROJECT_FILE" 
 - cabal new-build $LIBS --project-file=$PROJECT_FILE --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
 - sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt
 - if [ -f "webapi/configure.ac" ]; then
      (cd "webapi" && autoreconf -i)
   fi
 - if [ -f "webapi-contract/configure.ac" ]; then
      (cd "webapi-contract" && autoreconf -i);
   fi
 - if [ -f "webapi-swagger/configure.ac" ]; then
      (cd "webapi-swagger" && autoreconf -i);
   fi
 - if [ -f "webapi-docs/configure.ac" ]; then
      (cd "webapi-docs" && autoreconf -i);
   fi


# check whether current requested install-plan matches cached package-db snapshot
 - if diff -u $HOME/.cabsnap/installplan.txt installplan.txt;
   then
     echo "cabal build-cache HIT";
     rm -rfv .ghc;
     cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
     cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
   else
     echo "cabal build-cache MISS";
     rm -rf $HOME/.cabsnap;
     mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
     cat dist-newstyle/tmp/src-5743/network-2.8.0.0/dist/build/config.log;
     cabal new-build $LIBS --project-file=$PROJECT_FILE --only-dependencies --enable-tests --enable-benchmarks;
   fi

# snapshot package-db on cache miss
 - if [ ! -d $HOME/.cabsnap ];
   then
      echo "snapshotting package-db to build-cache";
      mkdir $HOME/.cabsnap;
      cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
      cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
   fi
 - rm -rf dist-newstyle/

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - cabal new-configure --project-file=$PROJECT_FILE --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal new-build --project-file=$PROJECT_FILE $LIBS  # this builds all libraries and executables (including tests/benchmarks)
 - cabal new-test --project-file=$PROJECT_FILE $WEBAPI
 # - cabal check
 # - cabal haddock --project-file=$PROJECT_FILE $WEBAPI # tests that documentation can be generated
 # - cabal sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
# - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
#   (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

# EOF
