{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE DataKinds             #-}
{-# LANGUAGE CPP #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleContexts #-}




module ContractGen where

import Control.Lens
import Data.Aeson hiding (String)
import Data.Proxy
import Data.Text as T
import GHC.Generics
import qualified Data.ByteString.Lazy as BSL
import Data.HashMap.Strict.InsOrd as HMSIns
import Language.Haskell.Exts hiding (OPTIONS)
import Data.Vector.Sized as SV hiding ((++))
import Safe
import Data.Finite.Internal
import qualified Data.HashMap.Lazy as HML
import Network.HTTP.Types.Method
import Data.Maybe
import Data.List.Split as DLS (splitOn)
import qualified Data.List as DL
import Data.String.Conv
import qualified Data.Map.Lazy as Map
import qualified Data.Char as Char
import Control.Monad
import Control.Monad.Trans.State.Strict
import Control.Monad.IO.Class

import Data.Swagger
import Data.Swagger.Declare
import Data.Swagger.Lens
import Data.Swagger.Operation

data NewData = NewData
  {
    mName :: String
  , mRecordTypes :: InnerRecords
  } deriving (Eq, Show)


  -- ("Tag",Schema 
  --             {_schemaTitle = Nothing, 
  --             _schemaDescription = Nothing, 
  --             _schemaRequired = [], 
  --             _schemaAllOf = Nothing, 
  --             _schemaProperties = fromList [
  --                 ("name",Inline (
  --                   Schema {
  --                     _schemaTitle = Nothing, 
  --                     _schemaDescription = Nothing, 
  --                     _schemaRequired = [], 
  --                     _schemaAllOf = Nothing, 
  --                     _schemaProperties = fromList [], 
  --                     _schemaAdditionalProperties = Nothing, 
  --                     _schemaDiscriminator = Nothing, 
  --                     _schemaReadOnly = Nothing, 
  --                     _schemaXml = Nothing, 
  --                     _schemaExternalDocs = Nothing, 
  --                     _schemaExample = Nothing, 
  --                     _schemaMaxProperties = Nothing, 
  --                     _schemaMinProperties = Nothing, 
  --                     _schemaParamSchema = ParamSchema {
  --                                           _paramschemadefault = Nothing, 
  --                                           _paramSchemaType = SwaggerString, 
  --                                           _paramSchemaFormat = Nothing, 
  --                                           _paramSchemaItems = Nothing, 
  --                                           _paramSchemaMaximum = Nothing, 
  --                                           _paramSchemaExclusiveMaximum = Nothing, 
  --                                           _paramSchemaMinimum = Nothing, 
  --                                           _paramSchemaExclusiveMinimum = Nothing, 
  --                                           _paramSchemaMaxLength = Nothing, 
  --                                           _paramSchemaMinLength = Nothing, 
  --                                           _paramSchemaPattern = Nothing, 
  --                                           _paramSchemaMaxItems = Nothing, 
  --                                           _paramSchemaMinItems = Nothing, 
  --                                           _paramSchemaUniqueItems = Nothing, 
  --                                           _paramSchemaEnum = Nothing, 
  --                                           _paramSchemaMultipleOf = Nothing}}))
  -- ,("id",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "Tag", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Nothing}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})

generateSwaggerDefinitionData :: InsOrdHashMap Text Schema -> [NewData]
generateSwaggerDefinitionData defDataHM = foldlWithKey' parseSwaggerDefinition [] defDataHM
 where 
  parseSwaggerDefinition :: [NewData] -> Text -> Schema -> [NewData]
  parseSwaggerDefinition accValue modelName modelSchema = 
    let (schemaProperties::InsOrdHashMap Text (Referenced Schema) ) = _schemaProperties modelSchema
        recordNamesAndTypes = foldlWithKey' (\accList innerRecord iRefSchema -> 
            let innerRecordName = toS $ T.append (T.toLower modelName) $ T.toTitle innerRecord
                innerRecordType = 
                  case iRefSchema of
                    Ref referenceName -> toS $ getReference referenceName
                    Inline irSchema -> getPrimitiveTypeFromInlineSchema irSchema
            in (innerRecordName, innerRecordType):accList ) [] schemaProperties
    in (NewData (toS modelName) recordNamesAndTypes):accValue

runCodeGen :: IO [CreateNewType]
runCodeGen = execStateT readSwaggerGenerateDefnModels [] 

type StateConfig = StateT [CreateNewType] IO ()

readSwaggerGenerateDefnModels :: StateConfig
readSwaggerGenerateDefnModels = do 
  petstoreJSONContents <- liftIO $ BSL.readFile "webapi-swagger/sampleFiles/swagger-petstore-ex.json"
  contractDetailsFromPetstore <- readSwaggerJSON petstoreJSONContents
  let decodedVal = eitherDecode petstoreJSONContents -- :: Either String Data.Swagger.Internal.Swagger
  case decodedVal of
    Left errMsg -> liftIO $ putStrLn errMsg
    Right (swaggerData :: Swagger) -> 
      let hModule = 
            Module noSrcSpan 
              (Just $ ModuleHead noSrcSpan (ModuleName noSrcSpan "Contract") Nothing Nothing)
              (fmap languageExtension ["TypeFamilies", "MultiParamTypeClasses", "DeriveGeneric", "TypeOperators", "DataKinds", "TypeSynonymInstances", "FlexibleInstances"])
              (fmap (moduleImport (False, "")) [ "WebApi",  "Data.Aeson",  "Data.ByteString",  "Data.Text as T",  "GHC.Generics"])
              ((createDataDeclarations (generateSwaggerDefinitionData (_swaggerDefinitions swaggerData) ) ) ++ generateContractBody "Petstore" contractDetailsFromPetstore)
      in liftIO $ writeFile "webapi-swagger/sampleFiles/modelGenTest.hs" $ prettyPrint hModule
 where 
  createDataDeclarations :: [NewData] -> [Decl SrcSpanInfo]
  createDataDeclarations newDataList = fmap (\newDataInfo -> dataDeclaration (DataType noSrcSpan) (mName newDataInfo) (mRecordTypes newDataInfo) ["Eq", "Show"] ) newDataList
 

readSwaggerJSON :: BSL.ByteString -> StateT [CreateNewType] IO [ContractDetails]
readSwaggerJSON petstoreJSONContents= do
  let decodedVal = eitherDecode petstoreJSONContents
  case decodedVal of
    Left errMsg -> error errMsg
    Right (swaggerData :: Swagger) -> HMSIns.foldlWithKey' (parseSwaggerPaths (_swaggerDefinitions swaggerData) ) (pure []) (_swaggerPaths swaggerData)
 where
  parseSwaggerPaths :: Definitions Schema -> StateT [CreateNewType] IO [ContractDetails] -> FilePath -> PathItem -> StateT [CreateNewType] IO [ContractDetails]
  parseSwaggerPaths (swaggerSchema:: InsOrdHashMap Text Schema) contractDetailsList swFilePath swPathDetails = do
    cDetailsList <- contractDetailsList
    let currentRouteId = case cDetailsList of 
          [] -> 1
          xs -> (routeId $ Prelude.head cDetailsList) + 1
        splitRoutePath = DLS.splitOn "/" $ removeLeadingSlash swFilePath
        mainRouteName = (DL.concat $ prettifyRouteName splitRoutePath) ++ "R"
        currentRoutePath = splitRoutePath
        methodList = [GET, PUT, POST, PATCH, DELETE, OPTIONS, HEAD]
    currentMethodData <- Control.Monad.foldM (processPathItem mainRouteName swPathDetails) (Map.empty) methodList
    let currentContractDetails = ContractDetails currentRouteId mainRouteName currentRoutePath currentMethodData
    pure (currentContractDetails:cDetailsList)
  removeLeadingSlash inputRoute = fromMaybe inputRoute (DL.stripPrefix "/" inputRoute)
  prettifyRouteName routeList = case ( routeList) of
    [] -> error "Expected atleast one element in the route! Got an empty list!"
    rList -> fmap (\(firstChar:remainingChar) -> (Char.toUpper firstChar):remainingChar ) $ fmap (DL.filter (\x -> not (x == '{' || x == '}') ) ) rList




  processPathItem :: String -> PathItem -> (Map.Map StdMethod ApiTypeDetails) ->  StdMethod -> StateT [CreateNewType] IO (Map.Map StdMethod ApiTypeDetails)
  processPathItem routeName pathItem methodDataAcc currentMethod = do
    case currentMethod of
      GET -> (processOperation routeName methodDataAcc) GET $ _pathItemGet pathItem
      PUT -> (processOperation routeName methodDataAcc) PUT $ _pathItemPut pathItem
      POST -> (processOperation routeName methodDataAcc) POST $ _pathItemPost pathItem
      DELETE -> (processOperation routeName methodDataAcc) DELETE $ _pathItemDelete pathItem
      OPTIONS -> (processOperation routeName methodDataAcc) OPTIONS $ _pathItemOptions pathItem
      HEAD -> (processOperation routeName methodDataAcc) HEAD $ _pathItemHead pathItem
      PATCH -> (processOperation routeName methodDataAcc) PATCH $ _pathItemPatch pathItem
  processOperation :: String -> Map.Map StdMethod ApiTypeDetails -> StdMethod -> Maybe Operation -> StateT [CreateNewType] IO (Map.Map StdMethod ApiTypeDetails)
  processOperation currentRouteName methodAcc stdMethod mOperationData = 
    case mOperationData of
      Just operationData -> do
    -- check or form ApiErr type by going through Response types. In most cases it will be a String/Text but in some cases we will need to have a sum type incase different err codes return different types.
        let apiResponses = _responsesResponses $ _operationResponses operationData
        -- parse params here and get type for FormParams/QueryParams, add to ApiTypeDetails
        (apiOutType, apiErrType) <- getApiType (currentRouteName ++ show stdMethod) apiResponses
        pure $ Map.insert stdMethod (ApiTypeDetails apiOutType apiErrType Nothing Nothing) methodAcc
      Nothing -> pure methodAcc
  getApiType :: String -> InsOrdHashMap HttpStatusCode (Referenced Response)  -> StateT [CreateNewType] IO (String, Maybe String)
  getApiType newTypeName responsesHM = foldlWithKey' (\monadicTuple currentCode currentResponse -> do
        (apiOutType, apiErrType) <- monadicTuple
        let currentResponseType = parseResponseContentGetType currentResponse
        case (currentCode >= 200 && currentCode <= 208) of
          True -> do
            finalOutType <- checkIfNewType apiOutType currentResponseType (newTypeName ++ "ApiOut")
            pure (finalOutType, apiErrType)
          False -> do
            case (currentCode >= 400 && currentCode <= 431 || currentCode >= 500 && currentCode <= 511) of
              True -> do
                finalErrType <- case apiErrType of
                      Just errType -> do
                        finalErrType <- checkIfNewType errType currentResponseType (newTypeName ++ "ApiErr")
                        pure $ Just finalErrType
                      Nothing -> pure $ Nothing
                pure (apiOutType, finalErrType)
              False -> error $ "Response code not matched! Response code received is: " ++ show currentCode
    ) (pure ("String", Nothing)) responsesHM  
  parseResponseContentGetType :: Referenced Response -> String
  parseResponseContentGetType refResponse = 
    case refResponse of
      Ref refText -> toS $ getReference refText
      Inline responseSchema -> 
        case (_responseSchema responseSchema) of
          Just (Ref refText) -> toS $ getReference refText
          Just (Inline respSchema) -> getPrimitiveTypeFromInlineSchema respSchema
          Nothing -> "String"

          

checkIfNewType :: String -> String -> String -> (StateT [CreateNewType] IO String)
checkIfNewType existingType currentType newTypeName = if (existingType == currentType)
                                          then pure existingType
                                          else do
                                            -- TODO: What if the error types are more than just 2? 
                                            let sumTypeInfo = SumType newTypeName [currentType, existingType]
                                            modify' (\existingState -> sumTypeInfo:existingState) 
                                            pure newTypeName



getPrimitiveTypeFromInlineSchema :: Schema -> String 
getPrimitiveTypeFromInlineSchema rSchema = 
    case ( (_paramSchemaType .  _schemaParamSchema) rSchema) of
      SwaggerString -> "String" -- add check here for the enum field in param and accordingly create new sumtype/add to StateT and return its name.
      SwaggerNumber -> "Int"
      SwaggerInteger -> "Integer"
      SwaggerBoolean -> "Bool"
      -- As per the pattern in `PetStore`, for SwaggerArray, we check the Param Schema Items field and look for a reference Name there.
      SwaggerArray -> case ( _paramSchemaItems . _schemaParamSchema) rSchema of
                        Just (SwaggerItemsObject obj) -> 
                          case obj of
                            Ref reference -> "[" ++ (toS $ getReference reference) ++ "]"
                            Inline recursiveSchema -> "[" ++ (getPrimitiveTypeFromInlineSchema recursiveSchema) ++ "]"
                        Just (SwaggerItemsArray innerArray) -> checkIfArray $ flip fmap innerArray (\singleElem -> 
                          case singleElem of
                            Ref ref -> toS $ getReference ref
                            Inline innerSchema -> getPrimitiveTypeFromInlineSchema innerSchema) 
                        -- Just (SwaggerItemsPrimitive ) -- TODO : Discuss possibility of primitive (query param or similar) here and how it should be handled.
                        Nothing -> error "Expected a SwaggerItems type due to SwaggerArray ParamSchema Type. But it did not find any! Please check the swagger spec!"
      -- TODO: Type for SwaggerObject is a very temporary solution and needs to be handled better. We need to look at schemaProperties and additionalProperties
      SwaggerObject -> "Value"-- case ( _ . _schemaAdditionalProperties)
      x -> ("Got Unexpected Primitive Value : " ++ show x)
 where 
  checkIfArray stringList =  
    case DL.nub stringList of
      sameElem:[] -> "[" ++ sameElem ++ "]"
      x -> error $ "Got different types in the same list. Not sure how to proceed! Please check the swagger doc! " ++ show x
    
data ContractDetails = ContractDetails
  {
    routeId :: Int 
  , routeName :: String
  , routePath :: [String]
  , methodData :: Map.Map StdMethod ApiTypeDetails
  } deriving (Eq, Show)


-- TODO: Add the other types here? Are they likely?
data ApiTypeDetails = ApiTypeDetails
  {
    -- TODO : Revisit this creation of new types /sum types to take care of more/all cases.
     apiOut :: String
  , apiErr :: Maybe String
  , formParam :: Maybe String
  , queryParam :: Maybe String
  } deriving (Eq, Show)


data CreateNewType = SumType String [String] | ProductType NewData 
  deriving (Eq, Show)


    -- _operationParameters = 
    --   [Inline (Param {
    --             _paramName = "status", 
    --             _paramDescription = Just "Status values that need to be considered for filter", 
    --             _paramRequired = Just True, 
    --             _paramSchema = ParamOther (ParamOtherSchema {
    --                                         _paramOtherSchemaIn = ParamQuery, 
    --                                         _paramOtherSchemaAllowEmptyValue = Nothing, 
    --                                         _paramOtherSchemaParamSchema = ParamSchema {
    --                                                                         _paramSchemaDefault = Nothing, 
    --                                                                         _paramSchemaType = SwaggerArray, 
    --                                                                         _paramSchemaFormat = Nothing, 
    --                                                                         _paramSchemaItems = Just (SwaggerItemsPrimitive (Just CollectionMulti) (ParamSchema {
    --                                                                                                                                                 _paramSchemaDefault = Just (String "available"), 
    --                                                                                                                                                 _paramSchemaType = SwaggerString, 
    --                                                                                                                                                 _paramSchemaFormat = Nothing, 
    --                                                                                                                                                 _paramSchemaItems = Nothing, 
    --                                                                                                                                                 _paramSchemaMaximum = Nothing, 
    --                                                                                                                                                 _paramSchemaExclusiveMaximum = Nothing, 
    --                                                                                                                                                 _paramSchemaMinimum = Nothing, 
    --                                                                                                                                                 _paramSchemaExclusiveMinimum = Nothing, 
    --                                                                                                                                                 _paramSchemaMaxLength = Nothing, 
    --                                                                                                                                                 _paramSchemaMinLength = Nothing, 
    --                                                                                                                                                 _paramSchemaPattern = Nothing, 
    --                                                                                                                                                 _paramSchemaMaxItems = Nothing, 
    --                                                                                                                                                 _paramSchemaMinItems = Nothing, 
    --                                                                                                                                                 _paramSchemaUniqueItems = Nothing, 
    --                                                                                                                                                 _paramSchemaEnum = Just [String "available",String "pending",String "sold"], 
    --                                                                                                                                                 _paramSchemaMultipleOf = Nothing})), 
    --                                         _paramSchemaMaximum = Nothing, 
    --                                         _paramSchemaExclusiveMaximum = Nothing, 
    --                                         _paramSchemaMinimum = Nothing, 
    --                                         _paramSchemaExclusiveMinimum = Nothing, 
    --                                         _paramSchemaMaxLength = Nothing, 
    --                                         _paramSchemaMinLength = Nothing, 
    --                                         _paramSchemaPattern = Nothing, 
    --                                         _paramSchemaMaxItems = Nothing, 
    --                                         _paramSchemaMinItems = Nothing, 
    --                                         _paramSchemaUniqueItems = Nothing, 
    --                                         _paramSchemaEnum = Nothing, 
    --                                         _paramSchemaMultipleOf = Nothing}})})], 
    -- _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid status value", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "Pet"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, 
    -- _operationSchemes = Nothing, 
    -- _operationDeprecated = Nothing, 
    -- _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}

  -- _swaggerPaths = fromList [("/user/logout",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Logs out current logged in user session", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "logoutUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/pet/findByStatus",PathItem {_pathItemGet = Just 
  --     (Operation {_operationTags = fromList ["pet"], 
  --                 _operationSummary = Just "Finds Pets by status", 
  --                 _operationDescription = Just "Multiple status values can be provided with comma separated strings", 
  --                 _operationExternalDocs = Nothing, 
  --                 _operationOperationId = Just "findPetsByStatus", 
  --                 _operationConsumes = Nothing, 
  --                 _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), 
  --                 _operationParameters = [Inline (Param {_paramName = "status", _paramDescription = Just "Status values that need to be considered for filter", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsPrimitive (Just CollectionMulti) (ParamSchema {_paramSchemaDefault = Just (String "available"), _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Just [String "available",String "pending",String "sold"], _paramSchemaMultipleOf = Nothing})), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], 
  --                 _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid status value", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "Pet"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, 
  --                 _operationSchemes = Nothing, 
  --                 _operationDeprecated = Nothing, 
  --                 _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), 
  --       _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/user/login",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Logs user into the system", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "loginUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "The user name for login", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "password", _paramDescription = Just "The password for login in clear text", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid username/password supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [("X-Rate-Limit",Header {_headerDescription = Just "calls per hour allowed by the user", _headerParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int32", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})
  --   ,("X-Expires-After",Header {_headerDescription = Just "date in UTC when token expires", _headerParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Just "date-time", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/user",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Create user", _operationDescription = Just "This can only be done by the logged in user.", _operationExternalDocs = Nothing, _operationOperationId = Just "createUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "Created user object", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "User"}))})], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/pet/findByTags",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Finds Pets by tags", _operationDescription = Just "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.", _operationExternalDocs = Nothing, _operationOperationId = Just "findPetsByTags", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "tags", _paramDescription = Just "Tags to filter by", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsPrimitive (Just CollectionMulti) (ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing})), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid tag value", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "Pet"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Just True, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
    
  --   ,("/store/order",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Place an order for a pet", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "placeOrder", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "order placed for purchasing the pet", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "Order"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid Order", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "Order"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/pet/{petId}/uploadImage",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "uploads an image", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "uploadFile", _operationConsumes = Just (MimeList {getMimeList = [multipart/form-data]}), _operationProduces = Just (MimeList {getMimeList = [application/json]}), _operationParameters = [Inline (Param {_paramName = "petId", _paramDescription = Just "ID of pet to update", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "additionalMetadata", _paramDescription = Just "Additional data to pass to server", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "file", _paramDescription = Just "file to upload", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerFile, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "ApiResponse"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/store/order/{orderId}",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Find purchase order by ID", _operationDescription = Just "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions", _operationExternalDocs = Nothing, _operationOperationId = Just "getOrderById", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "orderId", _paramDescription = Just "ID of pet that needs to be fetched", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Just 10.0, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Just 1.0, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Order not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "Order"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Delete purchase order by ID", _operationDescription = Just "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors", _operationExternalDocs = Nothing, _operationOperationId = Just "deleteOrder", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "orderId", _paramDescription = Just "ID of the order that needs to be deleted", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Just 1.0, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Order not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/store/inventory",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Returns pet inventories by status", _operationDescription = Just "Returns a map of status codes to quantities", _operationExternalDocs = Nothing, _operationOperationId = Just "getInventory", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/json]}), _operationParameters = [], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int32", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("api_key",[])]}]}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/pet/{petId}",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Find pet by ID", _operationDescription = Just "Returns a single pet", _operationExternalDocs = Nothing, _operationOperationId = Just "getPetById", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "petId", _paramDescription = Just "ID of pet to return", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Pet not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "Pet"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("api_key",[])]}]}), _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Updates a pet in the store with form data", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "updatePetWithForm", _operationConsumes = Just (MimeList {getMimeList = [application/x-www-form-urlencoded]}), _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "petId", _paramDescription = Just "ID of pet that needs to be updated", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "name", _paramDescription = Just "Updated name of the pet", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "status", _paramDescription = Just "Updated status of the pet", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(405,Inline (Response {_responseDescription = "Invalid input", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemDelete = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Deletes a pet", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "deletePet", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "api_key", _paramDescription = Nothing, _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamHeader, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "petId", _paramDescription = Just "Pet id to delete", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Pet not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/user/createWithArray",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Creates list of users with given input array", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "createUsersWithArrayInput", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "List of user object", _paramRequired = Just True, _paramSchema = ParamBody (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "User"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))})], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/pet",PathItem {_pathItemGet = Nothing, _pathItemPut = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Update an existing pet", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "updatePet", _operationConsumes = Just (MimeList {getMimeList = [application/json,application/xml]}), _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "Pet object that needs to be added to the store", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "Pet"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Pet not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(405,Inline (Response {_responseDescription = "Validation exception", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemPost = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Add a new pet to the store", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "addPet", _operationConsumes = Just (MimeList {getMimeList = [application/json,application/xml]}), _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "Pet object that needs to be added to the store", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "Pet"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(405,Inline (Response {_responseDescription = "Invalid input", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/user/createWithList",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Creates list of users with given input array", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "createUsersWithListInput", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "List of user object", _paramRequired = Just True, _paramSchema = ParamBody (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "User"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))})], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  --   ,("/user/{username}",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Get user by user name", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "getUserByName", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "The name that needs to be fetched. Use user1 for testing. ", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid username supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "User not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "User"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Updated user", _operationDescription = Just "This can only be done by the logged in user.", _operationExternalDocs = Nothing, _operationOperationId = Just "updateUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "name that need to be updated", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "body", _paramDescription = Just "Updated user object", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "User"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid user supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "User not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPost = Nothing, _pathItemDelete = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Delete user", _operationDescription = Just "This can only be done by the logged in user.", _operationExternalDocs = Nothing, _operationOperationId = Just "deleteUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "The name that needs to be deleted", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid username supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "User not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})], 

parseHaskellSrcContract :: IO ()
parseHaskellSrcContract = do
  parseResult <- parseFile "webapi-swagger/sampleFiles/contract.hs"
  case parseResult of
    ParseOk hModule -> 
      case hModule of
        Module srcLoc (Just _) langPragmas imports declarations -> putStrLn $ show declarations
        _ -> error "Module is not in the correct format?!"
    ParseFailed srcLoc errMsg -> putStrLn $ (show srcLoc) ++ " : " ++ errMsg


instanceTopVec :: Vector 4 String
instanceTopVec = fromJustNote "Expected a list with 4 elements for WebApi instance!" $ SV.fromList ["ApiContract", "EDITranslatorApi", "POST", "EdiToJsonR" ]

instanceTypeVec :: [Vector 4 String]
instanceTypeVec = [
                    ( fromMaybeSV $ SV.fromList ["ApiOut", "POST", "EdiToJsonR", "Value" ])
                  , ( fromMaybeSV $ SV.fromList ["ApiErr", "POST", "EdiToJsonR", "Text" ])
                  , ( fromMaybeSV $ SV.fromList ["FormParam", "POST", "EdiToJsonR", "EdiStr" ])
                  , ( fromMaybeSV $ SV.fromList ["QueryParam", "POST", "EdiToJsonR", "Maybe CharacterSet"]) 
                  ]
 where 
  fromMaybeSV = fromJustNote "Expected a list with 4 elements for WebApi instance! "

fromParamVec :: Vector 3 String
fromParamVec = fromJustNote "Expected a list with 3 elements for WebApi instance!" $ SV.fromList ["FromParam", "FormParam", "EdiStr"]

generateContractBody :: String -> [ContractDetails] -> [Decl SrcSpanInfo]
generateContractBody contractName contractDetails = 
  [emptyDataDeclaration contractName] ++ flip fmap contractDetails (\cDetail -> routeDeclaration (routeName cDetail) (routePath cDetail) ) ++ 
    [webApiInstance contractName (fmap (\ctDetail -> (routeName ctDetail , fmap show (Map.keys $ methodData ctDetail))) contractDetails ) ] ++
    (fmap (\(topVec, innerVecList) -> apiInstanceDeclaration topVec innerVecList ) $ DL.concat $ fmap (constructVectorForRoute contractName) contractDetails)
    
    
 where
  constructVectorForRoute :: String -> ContractDetails -> [(Vector 4 String, [Vector 4 String])] 
  constructVectorForRoute contractName ctrDetails = 
    let currentRouteName = routeName ctrDetails
    in Map.foldlWithKey' (routeDetailToVector contractName currentRouteName) [] (methodData ctrDetails)
  routeDetailToVector :: String -> String -> [(Vector 4 String, [Vector 4 String])] -> StdMethod -> ApiTypeDetails -> [(Vector 4 String, [Vector 4 String])]
  routeDetailToVector contractName routeName accValue currentMethod apiDetails = 
    let topLevelVector = fromMaybeSV $ SV.fromList ["ApiContract", contractName, (show currentMethod), routeName]
        respType = Just $ apiOut apiDetails
        errType = apiErr apiDetails
        -- TODO: add checks for query, form param here. Default `Nothing` for now
        formParamType = Nothing
        queryParamType = Nothing
        -- Add remaining types and checks for them
        instanceVectorList = catMaybes $ fmap (\(typeInfo, typeLabel) -> fmap (\tInfo -> fromMaybeSV $ SV.fromList [typeLabel, show currentMethod, routeName, tInfo] ) typeInfo) $ DL.zip (respType:errType:formParamType:queryParamType:[]) ["ApiOut", "ApiErr","FormParam", "QueryParam"]
    in (topLevelVector, instanceVectorList):accValue
  fromMaybeSV = fromJustNote "Expected a list with 4 elements for WebApi instance! "


printHaskellModule :: IO()
printHaskellModule = 
  let hModule = Module noSrcSpan (Just $ ModuleHead noSrcSpan (ModuleName noSrcSpan "Contract") Nothing Nothing)
        (fmap languageExtension ["TypeFamilies", "MultiParamTypeClasses", "DeriveGeneric", "TypeOperators", "DataKinds", "TypeSynonymInstances", "FlexibleInstances"])
        (fmap (moduleImport (False, "")) [ "WebApi",  "Data.Aeson",  "Data.ByteString",  "Data.Text as T",  "GHC.Generics"])
        [
        emptyDataDeclaration "EDITranslatorApi",
        dataDeclaration (NewType noSrcSpan) "EdiStr" [("ediStr", "ByteString")] ["Show", "Generic"],
        dataDeclaration (NewType noSrcSpan) "CharacterSet" [("characterSet", "ByteString")] ["Show", "Generic"],
        dataDeclaration (DataType noSrcSpan) "EdiJsonWithDelims" [("ediJson", "ByteString"), ("segmentDelimiter", "Char"), ("elementDelimiter", "Char")] ["Show", "Generic"],
        routeDeclaration "EdiToJsonR" ["convert", "toJson"],
        routeDeclaration "EdiFromJsonR" ["convert", "fromJson"],
        routeDeclaration "PathAfterThat" ["convert", "fromJson", "nextPath", "pathAfterThat"],
        routeDeclaration "YaPath" ["convert", "fromJson", "somePath", "anotherPath", "yaPathHere"],
        apiInstanceDeclaration instanceTopVec instanceTypeVec, 
        fromParamInstanceDecl fromParamVec,
        webApiInstance "EDITranslatorApi" [("EdiToJsonR", ["POST", "PUT", "GET"]), ("EdiFromJsonR", ["GET", "POST"])]
        ]
  in writeFile "webapi-swagger/sampleFiles/codeGen.hs" $ prettyPrint hModule



type InnerRecords = [(String, String)]
type DerivingClass = String  

dataDeclaration :: (DataOrNew SrcSpanInfo) -> String -> InnerRecords -> [DerivingClass] -> Decl SrcSpanInfo
dataDeclaration dataOrNew dataName innerRecords derivingList = 
  DataDecl noSrcSpan  
    dataOrNew 
    Nothing 
    (declarationHead dataName)
    (constructorDeclaration dataName innerRecords)
    (Just $ derivingDecl  derivingList)


declarationHead :: String -> DeclHead SrcSpanInfo
declarationHead declHeadName = (DHead noSrcSpan (Ident noSrcSpan declHeadName) )

constructorDeclaration :: String -> InnerRecords -> [QualConDecl SrcSpanInfo]
constructorDeclaration constructorName innerRecords = 
  [QualConDecl noSrcSpan Nothing Nothing (RecDecl noSrcSpan (nameDecl constructorName) (fmap fieldDecl innerRecords) )] 

nameDecl :: String -> Name SrcSpanInfo
nameDecl = Ident noSrcSpan 

fieldDecl :: (String, String) -> FieldDecl SrcSpanInfo
fieldDecl (fieldName, fieldType) = 
  FieldDecl noSrcSpan [nameDecl fieldName] (TyCon noSrcSpan (UnQual noSrcSpan (nameDecl fieldType)))

derivingDecl :: [String] -> Deriving SrcSpanInfo
derivingDecl derivingList = Deriving noSrcSpan $ fmap iRule derivingList
 where 
  iRule tClass = IRule noSrcSpan Nothing Nothing (IHCon noSrcSpan (UnQual noSrcSpan (nameDecl tClass)))

emptyDataDeclaration :: String -> Decl SrcSpanInfo
emptyDataDeclaration declName = 
  DataDecl noSrcSpan 
    (DataType noSrcSpan) 
    Nothing
    (declarationHead declName) 
    []
    Nothing

languageExtension :: String -> ModulePragma SrcSpanInfo
languageExtension langExtName = LanguagePragma noSrcSpan [nameDecl langExtName]


-- Modules imported as *NOT qualified* by default for now
moduleImport :: (Bool, String) -> String -> ImportDecl SrcSpanInfo
moduleImport (isQualified, qualifiedName) moduleName  = ImportDecl {importAnn = noSrcSpan, importModule = ModuleName noSrcSpan moduleName, importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Nothing, importSpecs = Nothing}


apiInstanceDeclaration :: Vector 4 String -> [Vector 4 String] -> Decl SrcSpanInfo
apiInstanceDeclaration topLevelDecl innerTypesInstList = 
  InstDecl noSrcSpan Nothing 
    (IRule noSrcSpan Nothing Nothing
      (IHApp noSrcSpan 
        (IHApp noSrcSpan 
          (IHApp noSrcSpan 
            (instanceHead (SV.index topLevelDecl (Finite 0) ) )
            (typeConstructor $ SV.index topLevelDecl (Finite 1)  )
          )
          (typeConstructor $ SV.index topLevelDecl (Finite 2)  )
        ) 
        (typeConstructor $ SV.index topLevelDecl (Finite 3) )
      ) 
    ) (Just $ fmap apiInstanceTypeDecl innerTypesInstList)


apiInstanceTypeDecl :: Vector 4 String -> InstDecl SrcSpanInfo 
apiInstanceTypeDecl innerTypes =
  InsType noSrcSpan
    (TyApp noSrcSpan
        (TyApp noSrcSpan
          (typeConstructor (SV.index innerTypes (Finite 0) ) )
          (typeConstructor (SV.index innerTypes (Finite 1) ) )
        )
      (typeConstructor (SV.index innerTypes (Finite 2) ) )
    )
    (typeConstructor (SV.index innerTypes (Finite 3) ) )

instanceHead :: String -> InstHead SrcSpanInfo
instanceHead instName = (IHCon noSrcSpan
                          (UnQual noSrcSpan $ nameDecl instName)
                        ) 


typeConstructor :: String -> Type SrcSpanInfo
typeConstructor typeConName = (TyCon noSrcSpan  
                                (UnQual noSrcSpan $ nameDecl typeConName)
                              )

fromParamInstanceDecl :: Vector 3 String -> Decl SrcSpanInfo 
fromParamInstanceDecl instTypes = 
  InstDecl noSrcSpan Nothing 
      (IRule noSrcSpan Nothing Nothing 
        (IHApp noSrcSpan 
          (IHApp noSrcSpan 
            (instanceHead $ SV.index instTypes (Finite 0) )
            (TyPromoted noSrcSpan (PromotedCon noSrcSpan True (UnQual noSrcSpan (nameDecl $ SV.index instTypes (Finite 1) ))))
          )
          (typeConstructor $ SV.index instTypes (Finite 2) )
          )
        ) 
      Nothing

recursiveTypeForRoute :: [String] -> Type SrcSpanInfo
recursiveTypeForRoute routeComponents = 
  case routeComponents of
    [] -> error "Did not expect an empty list here! "
    x:[] -> promotedType x
    prevElem:lastElem:[] -> 
      (TyInfix noSrcSpan 
        (promotedType prevElem)
        (unQualSymDecl ":/")
        (promotedType lastElem)
      )
    currentRoute:remainingRoute -> 
      (TyInfix noSrcSpan 
        (promotedType currentRoute)
        (unQualSymDecl ":/")
        (recursiveTypeForRoute remainingRoute)
      )   


promotedType :: String -> Type SrcSpanInfo
promotedType typeNameData = 
  (TyPromoted noSrcSpan 
    (PromotedString noSrcSpan typeNameData typeNameData) 
  ) 

unQualSymDecl :: String -> QName SrcSpanInfo
unQualSymDecl str = 
  (UnQual noSrcSpan 
    (Symbol noSrcSpan str)
  )
    
routeDeclaration :: String -> [String] -> Decl SrcSpanInfo
routeDeclaration routeName routePathComponents = 
  TypeDecl noSrcSpan  
    (declarationHead routeName)
    (recursiveTypeForRoute routePathComponents)


webApiInstance :: String -> [(String, [String])] -> Decl SrcSpanInfo
webApiInstance mainTypeName routeAndMethods =
  InstDecl noSrcSpan Nothing 
    (IRule noSrcSpan Nothing Nothing 
      (IHApp noSrcSpan 
        (instanceHead "WebApi") -- TODO: confirm that this will always remain the same.
        (typeConstructor mainTypeName) 
      )
    ) 
    (Just 
      [InsType noSrcSpan 
        (TyApp noSrcSpan 
          (typeConstructor "Apis")
          (typeConstructor mainTypeName)
        ) 
        (TyPromoted noSrcSpan 
          (PromotedList noSrcSpan True 
            (fmap innerRouteInstance routeAndMethods)
          )
        )
      ]
    )
 where
  innerRouteInstance :: (String, [String]) -> Type SrcSpanInfo
  innerRouteInstance (rName, listOfMethods) =
      TyApp noSrcSpan 
        (TyApp noSrcSpan 
          (typeConstructor "Route") 
          (TyPromoted noSrcSpan 
            (PromotedList noSrcSpan True 
              (fmap typeConstructor listOfMethods)               
            )
          )
        ) 
        (typeConstructor rName)

---------------------------------------------------------------------------------------
-- Support multiple versions of GHC (Use ifndef )
-- for LTS 9.0 -> 1.18.2

#if MIN_VERSION_haskell_src_exts(1,20,0)
-- for haskell-src-exts 1.20.x
dataDeclaration :: Decl SrcSpanInfo
dataDeclaration = 
    DataDecl noSrcSpan  
      (NewType noSrcSpan) 
      Nothing 
      (DHead noSrcSpan (Ident noSrcSpan "CharacterSet") )
      [QualConDecl noSrcSpan Nothing Nothing (RecDecl noSrcSpan (Ident noSrcSpan "CharacterSet") [FieldDecl noSrcSpan [Ident noSrcSpan "characterSet"] (TyCon noSrcSpan (UnQual noSrcSpan (Ident noSrcSpan "ByteString")))])] 
      [Deriving noSrcSpan Nothing [IRule noSrcSpan Nothing Nothing (IHCon noSrcSpan (UnQual noSrcSpan (Ident noSrcSpan "Show"))),IRule noSrcSpan Nothing Nothing (IHCon noSrcSpan (UnQual noSrcSpan (Ident noSrcSpan "Generic")))]]
#endif




-- PathItem {
--   _pathItemGet = 
--     Just (Operation 
--           {_operationTags = fromList ["user"], 
--            _operationSummary = Just "Logs out current logged in user session", 
--            _operationDescription = Just "", 
--            _operationExternalDocs = Nothing, 
--            _operationOperationId = Just "logoutUser", 
--            _operationConsumes = Nothing, 
--            _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), 
--            _operationParameters = [], 
--            _operationResponses = 
--               Responses {
--                 _responsesDefault = Just (Inline (
--                   Response {
--                     _responseDescription = "successful operation", 
--                     _responseSchema = Nothing, 
--                     _responseHeaders = fromList [], 
--                     _responseExamples = Nothing})), 
--                 _responsesResponses = fromList []}, 
--            _operationSchemes = Nothing, 
--            _operationDeprecated = Nothing, 
--            _operationSecurity = []}), 
  
--   _pathItemPut = Nothing, 
--   _pathItemPost = Nothing, 
--   _pathItemDelete = Nothing, 
--   _pathItemOptions = Nothing, 
--   _pathItemHead = Nothing, 
--   _pathItemPatch = Nothing, 
--   _pathItemParameters = []
--   }




-- Swagger {
--   _swaggerInfo = 
--     Info {_infoTitle = "Swagger Petstore", _infoDescription = Just "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.", _infoTermsOfService = Just "http://swagger.io/terms/", _infoContact = Just (Contact {_contactName = Nothing, _contactUrl = Nothing, _contactEmail = Just "apiteam@swagger.io"}), _infoLicense = Just (License {_licenseName = "Apache 2.0", _licenseUrl = Just (URL {getUrl = "http://www.apache.org/licenses/LICENSE-2.0.html"})}), _infoVersion = "1.0.0"}, 
  
--   _swaggerHost = Just (Host {_hostName = "petstore.swagger.io", _hostPort = Nothing}), 
--   _swaggerBasePath = Just "/v2", 
--   _swaggerSchemes = Just [Https,Http], 
--   _swaggerConsumes = MimeList {getMimeList = []}, 
--   _swaggerProduces = MimeList {getMimeList = []}, 
--   _swaggerPaths = fromList [("/user/logout",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Logs out current logged in user session", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "logoutUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/pet/findByStatus",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Finds Pets by status", _operationDescription = Just "Multiple status values can be provided with comma separated strings", _operationExternalDocs = Nothing, _operationOperationId = Just "findPetsByStatus", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "status", _paramDescription = Just "Status values that need to be considered for filter", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsPrimitive (Just CollectionMulti) (ParamSchema {_paramSchemaDefault = Just (String "available"), _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Just [String "available",String "pending",String "sold"], _paramSchemaMultipleOf = Nothing})), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid status value", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "Pet"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/user/login",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Logs user into the system", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "loginUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "The user name for login", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "password", _paramDescription = Just "The password for login in clear text", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid username/password supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [("X-Rate-Limit",Header {_headerDescription = Just "calls per hour allowed by the user", _headerParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int32", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})
--   ,("X-Expires-After",Header {_headerDescription = Just "date in UTC when token expires", _headerParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Just "date-time", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/user",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Create user", _operationDescription = Just "This can only be done by the logged in user.", _operationExternalDocs = Nothing, _operationOperationId = Just "createUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "Created user object", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "User"}))})], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/pet/findByTags",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Finds Pets by tags", _operationDescription = Just "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.", _operationExternalDocs = Nothing, _operationOperationId = Just "findPetsByTags", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "tags", _paramDescription = Just "Tags to filter by", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamQuery, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsPrimitive (Just CollectionMulti) (ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing})), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid tag value", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "Pet"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Just True, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
  
--   ,("/store/order",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Place an order for a pet", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "placeOrder", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "order placed for purchasing the pet", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "Order"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid Order", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "Order"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/pet/{petId}/uploadImage",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "uploads an image", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "uploadFile", _operationConsumes = Just (MimeList {getMimeList = [multipart/form-data]}), _operationProduces = Just (MimeList {getMimeList = [application/json]}), _operationParameters = [Inline (Param {_paramName = "petId", _paramDescription = Just "ID of pet to update", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "additionalMetadata", _paramDescription = Just "Additional data to pass to server", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "file", _paramDescription = Just "file to upload", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerFile, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "ApiResponse"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/store/order/{orderId}",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Find purchase order by ID", _operationDescription = Just "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions", _operationExternalDocs = Nothing, _operationOperationId = Just "getOrderById", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "orderId", _paramDescription = Just "ID of pet that needs to be fetched", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Just 10.0, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Just 1.0, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Order not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "Order"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Delete purchase order by ID", _operationDescription = Just "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors", _operationExternalDocs = Nothing, _operationOperationId = Just "deleteOrder", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "orderId", _paramDescription = Just "ID of the order that needs to be deleted", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Just 1.0, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Order not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/store/inventory",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["store"], _operationSummary = Just "Returns pet inventories by status", _operationDescription = Just "Returns a map of status codes to quantities", _operationExternalDocs = Nothing, _operationOperationId = Just "getInventory", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/json]}), _operationParameters = [], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Just (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int32", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("api_key",[])]}]}), _pathItemPut = Nothing, _pathItemPost = Nothing, _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/pet/{petId}",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Find pet by ID", _operationDescription = Just "Returns a single pet", _operationExternalDocs = Nothing, _operationOperationId = Just "getPetById", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "petId", _paramDescription = Just "ID of pet to return", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Pet not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "Pet"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("api_key",[])]}]}), _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Updates a pet in the store with form data", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "updatePetWithForm", _operationConsumes = Just (MimeList {getMimeList = [application/x-www-form-urlencoded]}), _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "petId", _paramDescription = Just "ID of pet that needs to be updated", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "name", _paramDescription = Just "Updated name of the pet", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "status", _paramDescription = Just "Updated status of the pet", _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamFormData, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(405,Inline (Response {_responseDescription = "Invalid input", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemDelete = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Deletes a pet", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "deletePet", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "api_key", _paramDescription = Nothing, _paramRequired = Just False, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamHeader, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "petId", _paramDescription = Just "Pet id to delete", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Pet not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/user/createWithArray",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Creates list of users with given input array", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "createUsersWithArrayInput", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "List of user object", _paramRequired = Just True, _paramSchema = ParamBody (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "User"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))})], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/pet",PathItem {_pathItemGet = Nothing, _pathItemPut = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Update an existing pet", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "updatePet", _operationConsumes = Just (MimeList {getMimeList = [application/json,application/xml]}), _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "Pet object that needs to be added to the store", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "Pet"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid ID supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "Pet not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(405,Inline (Response {_responseDescription = "Validation exception", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemPost = Just (Operation {_operationTags = fromList ["pet"], _operationSummary = Just "Add a new pet to the store", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "addPet", _operationConsumes = Just (MimeList {getMimeList = [application/json,application/xml]}), _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "Pet object that needs to be added to the store", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "Pet"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(405,Inline (Response {_responseDescription = "Invalid input", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = [SecurityRequirement {getSecurityRequirement = fromList [("petstore_auth",["write:pets","read:pets"])]}]}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/user/createWithList",PathItem {_pathItemGet = Nothing, _pathItemPut = Nothing, _pathItemPost = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Creates list of users with given input array", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "createUsersWithListInput", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "body", _paramDescription = Just "List of user object", _paramRequired = Just True, _paramSchema = ParamBody (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "User"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))})], _operationResponses = Responses {_responsesDefault = Just (Inline (Response {_responseDescription = "successful operation", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})), _responsesResponses = fromList []}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemDelete = Nothing, _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})
--   ,("/user/{username}",PathItem {_pathItemGet = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Get user by user name", _operationDescription = Just "", _operationExternalDocs = Nothing, _operationOperationId = Just "getUserByName", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "The name that needs to be fetched. Use user1 for testing. ", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid username supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "User not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(200,Inline (Response {_responseDescription = "successful operation", _responseSchema = Just (Ref (Reference {getReference = "User"})), _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPut = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Updated user", _operationDescription = Just "This can only be done by the logged in user.", _operationExternalDocs = Nothing, _operationOperationId = Just "updateUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "name that need to be updated", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})}),Inline (Param {_paramName = "body", _paramDescription = Just "Updated user object", _paramRequired = Just True, _paramSchema = ParamBody (Ref (Reference {getReference = "User"}))})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid user supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "User not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemPost = Nothing, _pathItemDelete = Just (Operation {_operationTags = fromList ["user"], _operationSummary = Just "Delete user", _operationDescription = Just "This can only be done by the logged in user.", _operationExternalDocs = Nothing, _operationOperationId = Just "deleteUser", _operationConsumes = Nothing, _operationProduces = Just (MimeList {getMimeList = [application/xml,application/json]}), _operationParameters = [Inline (Param {_paramName = "username", _paramDescription = Just "The name that needs to be deleted", _paramRequired = Just True, _paramSchema = ParamOther (ParamOtherSchema {_paramOtherSchemaIn = ParamPath, _paramOtherSchemaAllowEmptyValue = Nothing, _paramOtherSchemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})})], _operationResponses = Responses {_responsesDefault = Nothing, _responsesResponses = fromList [(400,Inline (Response {_responseDescription = "Invalid username supplied", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing})),(404,Inline (Response {_responseDescription = "User not found", _responseSchema = Nothing, _responseHeaders = fromList [], _responseExamples = Nothing}))]}, _operationSchemes = Nothing, _operationDeprecated = Nothing, _operationSecurity = []}), _pathItemOptions = Nothing, _pathItemHead = Nothing, _pathItemPatch = Nothing, _pathItemParameters = []})], 
  -- _swaggerDefinitions = fromList 
  --   [("Tag",Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [("name",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("id",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "Tag", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Nothing}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})
  --   ,("Category",Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [("name",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("id",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "Category", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Nothing}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})
  --   ,("User",Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [("email",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("phone",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("userStatus",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Just "User Status", _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int32", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("lastName",Inline (Schema 
  --                           _schemaTitle = Nothing, 
  --                           _schemaDescription = Nothing, 
  --                           _schemaRequired = [], 
  --                           _schemaAllOf = Nothing, 
  --                           _schemaProperties = fromList [], 
  --                           _schemaAdditionalProperties = Nothing, 
  --                           _schemaDiscriminator = Nothing, 
  --                           _schemaReadOnly = Nothing, 
  --                           _schemaXml = Nothing, 
  --                           _schemaExternalDocs = Nothing, 
  --                           _schemaExample = Nothing, 
  --                           _schemaMaxProperties = Nothing, 
  --                           _schemaMinProperties = Nothing, 
  --                           _schemaParamSchema = ParamSchema {
  --                               _paramSchemaDefault = Nothing, 
  --                               _paramSchemaType = SwaggerString, 
  --                               _paramSchemaFormat = Nothing, 
  --                               _paramSchemaItems = Nothing, 
  --                               _paramSchemaMaximum = Nothing, 
  --                               _paramSchemaExclusiveMaximum = Nothing, 
  --                               _paramSchemaMinimum = Nothing, 
  --                               _paramSchemaExclusiveMinimum = Nothing, 
  --                               _paramSchemaMaxLength = Nothing, 
  --                               _paramSchemaMinLength = Nothing, 
  --                               _paramSchemaPattern = Nothing, 
  --                               _paramSchemaMaxItems = Nothing, 
  --                               _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("username",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("password",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("firstName",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("id",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "User", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Nothing}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})
  --   ,("ApiResponse",Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [("code",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int32", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("type",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("message",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})
  --   ,("Order",Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [("petId",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("status",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Just "Order Status", _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Just [String "placed",String "approved",String "delivered"], _paramSchemaMultipleOf = Nothing}}))
  --   ,("quantity",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int32", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("id",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("shipDate",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Just "date-time", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))
  --   ,("complete",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Just (Bool False), _paramSchemaType = SwaggerBoolean, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "Order", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Nothing}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}),("Pet",Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = ["name","photoUrls"], _schemaAllOf = Nothing, _schemaProperties = fromList [("photoUrls",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "photoUrl", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Just True}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})),("status",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Just "pet status in the store", _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Just [String "available",String "pending",String "sold"], _paramSchemaMultipleOf = Nothing}})),("category",Ref (Reference {getReference = "Category"})),("name",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Just (String "doggie"), _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerString, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})),("id",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Nothing, _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerInteger, _paramSchemaFormat = Just "int64", _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})),("tags",Inline (Schema {_schemaTitle = Nothing, _schemaDescription = Nothing, _schemaRequired = [], _schemaAllOf = Nothing, _schemaProperties = fromList [], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "tag", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Just True}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerArray, _paramSchemaFormat = Nothing, _paramSchemaItems = Just (SwaggerItemsObject (Ref (Reference {getReference = "Tag"}))), _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}}))], _schemaAdditionalProperties = Nothing, _schemaDiscriminator = Nothing, _schemaReadOnly = Nothing, _schemaXml = Just (Xml {_xmlName = Just "Pet", _xmlNamespace = Nothing, _xmlPrefix = Nothing, _xmlAttribute = Nothing, _xmlWrapped = Nothing}), _schemaExternalDocs = Nothing, _schemaExample = Nothing, _schemaMaxProperties = Nothing, _schemaMinProperties = Nothing, _schemaParamSchema = ParamSchema {_paramSchemaDefault = Nothing, _paramSchemaType = SwaggerObject, _paramSchemaFormat = Nothing, _paramSchemaItems = Nothing, _paramSchemaMaximum = Nothing, _paramSchemaExclusiveMaximum = Nothing, _paramSchemaMinimum = Nothing, _paramSchemaExclusiveMinimum = Nothing, _paramSchemaMaxLength = Nothing, _paramSchemaMinLength = Nothing, _paramSchemaPattern = Nothing, _paramSchemaMaxItems = Nothing, _paramSchemaMinItems = Nothing, _paramSchemaUniqueItems = Nothing, _paramSchemaEnum = Nothing, _paramSchemaMultipleOf = Nothing}})], 
  -- _swaggerParameters = fromList [], 
  -- _swaggerResponses = fromList [], 
  -- _swaggerSecurityDefinitions = fromList [("api_key",SecurityScheme {_securitySchemeType = SecuritySchemeApiKey (ApiKeyParams {_apiKeyName = "api_key", _apiKeyIn = ApiKeyHeader}), _securitySchemeDescription = Nothing}),("petstore_auth",SecurityScheme {_securitySchemeType = SecuritySchemeOAuth2 (OAuth2Params {_oauth2Flow = OAuth2Implicit "http://petstore.swagger.io/oauth/dialog", _oauth2Scopes = fromList [("write:pets","modify pets in your account"),("read:pets","read your pets")]}), _securitySchemeDescription = Nothing})], 
  -- _swaggerSecurity = [], 
  -- _swaggerTags = fromList [Tag {_tagName = "pet", _tagDescription = Just "Everything about your Pets", _tagExternalDocs = Just (ExternalDocs {_externalDocsDescription = Just "Find out more", _externalDocsUrl = URL {getUrl = "http://swagger.io"}})},Tag {_tagName = "store", _tagDescription = Just "Access to Petstore orders", _tagExternalDocs = Nothing},Tag {_tagName = "user", _tagDescription = Just "Operations about user", _tagExternalDocs = Just (ExternalDocs {_externalDocsDescription = Just "Find out more about our store", _externalDocsUrl = URL {getUrl = "http://swagger.io"}})}], 
  -- _swaggerExternalDocs = Just (ExternalDocs {_externalDocsDescription = Just "Find out more about Swagger", _externalDocsUrl = URL {getUrl = "http://swagger.io"}})}
